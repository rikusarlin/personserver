{"version":3,"sources":["services/persons.js","components/App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","Error","Person","name","number","deleteCertainPerson","onClick","Persons","persons","filterValue","personList","filter","person","toUpperCase","indexOf","map","key","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","handleFilterChange","App","useState","setPersons","setNewName","setNewNumber","setFilterValue","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","useEffect","personService","returnedPersons","event","target","preventDefault","console","log","personObject","nameList","existingIndex","window","confirm","returnedPerson","setTimeout","catch","error","maxId","reduce","prev","current","newPersons","concat","personName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31040d45.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n  \nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  deletePerson: deletePerson \n}","import React, { useState, useEffect } from 'react'\nimport personService from '../services/persons'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"info\">\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Person = ({id, name,number,deleteCertainPerson}) => {\n  return(\n    <li>{name} {number} <button onClick={() => deleteCertainPerson(id)}>delete</button></li>\n  )\n}\n\nconst Persons = ({persons, filterValue, deleteCertainPerson}) => {\n    const filteredPersons = persons.filter(person => person.name.toUpperCase().indexOf(filterValue.toUpperCase()) >= 0)\n    const personList = filteredPersons.map(person =>\n    <Person\n      key={person.id}\n      id={person.id}\n      name={person.name}\n      number={person.number}\n      deleteCertainPerson={deleteCertainPerson}\n    />)\n    return(\n        <div><ul>{personList}</ul></div>\n    )\n  }\n \nconst PersonForm = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n    return(\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nconst Filter = ({filterValue,handleFilterChange}) => {\n    return (\n        <div>filter persons with <input value={filterValue} onChange={handleFilterChange}></input></div>\n    )\n}\n\nconst App = () => {\n  /*\n  const [ persons, setPersons] = useState([\n        { name: 'Arto Hellas', number: '040-123456' },\n        { name: 'Ada Lovelace', number: '39-44-5323523' },\n        { name: 'Dan Abramov', number: '12-43-234345' },\n        { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  ])\n  */ \n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterValue, setFilterValue ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  // This loads the initial list\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(returnedPersons => {\n        setPersons(returnedPersons)\n      })\n  }, [])\n\n  const deleteCertainPerson = id => {\n    const personName = persons.filter(person => person.id === id).reduce(person => person.name).name\n    const answer = window.confirm(`Delete ${personName} ?`)\n    if(answer === true){\n      personService\n        .deletePerson(id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== id))\n          setNotificationMessage(\n            `Deleted ${personName}`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)    \n        })\n        .catch(() => {\n          // Some problem - read stuff again & inform\n          personService\n          .getAll()\n          .then(returnedPersons => {\n            setPersons(returnedPersons)\n          })    \n          setErrorMessage(\n            `Information of  ${personName} has already been removed from the server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)    \n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    //console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilterValue(event.target.value)\n\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    console.log(\"Persons before: \",persons)\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    // Check whether the person is already listed by this name\n    const nameList = persons.map((person) => person.name)\n    console.log(\"Names:\", nameList)\n    const existingIndex = nameList.indexOf(newName)\n    if (existingIndex >= 0){\n        const answer = window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)\n        if(answer === true){\n          console.log(\"Updating name: \", personObject.name)\n          personObject.id=persons[existingIndex].id\n          personService\n            .update(personObject.id, personObject)\n            .then(returnedPerson => {\n              setPersons(persons.map(person => person.id !== returnedPerson.id ? person : returnedPerson))\n              console.log(\"Persons after update: \",persons)    \n              setNotificationMessage(\n                `Updated phone number of ${personObject.name}`\n              )\n              setNewName('')\n              setNewNumber('')              \n                  setTimeout(() => {\n                setNotificationMessage(null)\n              }, 5000)    \n            })\n            .catch(error => {\n              setErrorMessage(error.response.data.error)\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)    \n            })    \n        } else {\n          console.log(`Not adding ${newName}  since it is already added to the phonebook`)\n        }\n    } else {\n      console.log(\"Adding name: \", personObject.name)\n      // Find the person with largest id value\n      const maxId = persons.reduce((prev, current) => (prev.id > current.id) ? prev : current)\n      // New id is this plus one\n      // This really should be left to the server side...\n      personObject.id=maxId.id+1\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          const newPersons = persons.concat(returnedPerson)\n          setPersons(newPersons)\n          console.log(\"Persons after addition: \",newPersons)\n          setNotificationMessage(\n            `Added ${personObject.name}`\n          )\n          setNewName('')\n          setNewNumber('')\n              setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)    \n        })\n        .catch(error => {\n          setErrorMessage(error.response.data.error)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)    \n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage}/>\n      <Error message={errorMessage}/>\n      <Filter \n        filterValue={filterValue} \n        handleFilterChange={handleFilterChange} />\n      <h3>Add a new person</h3>\n      <PersonForm \n        addPerson={addPerson} \n        newName={newName} \n        handleNameChange={handleNameChange} \n        newNumber={newNumber} \n        handleNumberChange={handleNumberChange}/>\n      <h3>Numbers</h3>\n      <Persons \n        persons={persons}\n        filterValue={filterValue}\n        deleteCertainPerson={deleteCertainPerson}/>\n      </div>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from \"./components/App\"\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}